AWSTemplateFormatVersion: '2010-09-09'
Metadata: {}

Parameters:
#############
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
  AvailabilityZone:
    Description: Availability zone to deploy
    Type: AWS::EC2::AvailabilityZone::Name
  InstanceType:
    Type: String
    Default: t2.small
    AllowedValues: 
      - t2.medium
      - t2.small
    Description: Enter t2.medium or t2.small. Default is t2.small.
  Domainname:
    Type: String
    Description: Domain name for creating a certificate for it.    
    Default: example.com
    

Mappings:
#########
  RegionMap:
    eu-central-1:
      CentOS7: "ami-2882ddc3"
    eu-west-3:
      CentOS7: "ami-4219af3f"

Conditions: 
  CreateELBandCert: !Not [!Equals [!Ref Domainname, example.com]]

Resources:
##########
  openshiftvpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: openshift-cf-vpc

  internetgatewayos:
    Type: AWS::EC2::InternetGateway

  gatewayattachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref internetgatewayos
      VpcId: !Ref openshiftvpc

  subnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref openshiftvpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Ref AvailabilityZone

  subnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref openshiftvpc
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Ref AvailabilityZone      

  routetable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref openshiftvpc

  subnetroutetableasoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
     RouteTableId: !Ref routetable
     SubnetId: !Ref subnet1

  route:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref routetable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetgatewayos

  openshiftmaster:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
      - Key: Name
        Value: openshift-master
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref subnet1
          GroupSet:
             - !Ref mastersecgroup
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]

  openshiftworker1:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
      - Key: Name
        Value: openshift-worker1
      InstanceType: !Ref InstanceType 
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref subnet1
          GroupSet:
             - !Ref workersecgroup
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]

  openshiftworker2:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
      - Key: Name
        Value: openshift-worker2
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref subnet1
          GroupSet:
             - !Ref workersecgroup
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]

  volume1:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt openshiftmaster.AvailabilityZone
      Size: 50
    DeletionPolicy: Delete

  volat1:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref volume1
      InstanceId: !Ref openshiftmaster

  volume2:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt openshiftworker1.AvailabilityZone
      Size: 50
    DeletionPolicy: Delete

  volat2:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref volume2
      InstanceId: !Ref openshiftworker1  

  volume3:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt openshiftworker2.AvailabilityZone
      Size: 50
    DeletionPolicy: Delete

  volat3:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref volume3
      InstanceId: !Ref openshiftworker2

  workersecgroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref openshiftvpc
      GroupDescription: Security group for the worker Kubernetes nodes
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0        
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0         
      - IpProtocol: tcp
        FromPort: '10250'
        ToPort: '10250'
        CidrIp: 10.0.0.0/16      

  mastersecgroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref openshiftvpc
      GroupDescription: Security group for the master Kubernetes node
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '8443'
        ToPort: '8443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0        
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0        
      - IpProtocol: tcp
        FromPort: '10250'
        ToPort: '10250'
        CidrIp: 10.0.0.0/16
  sslcertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateELBandCert    
    Properties:
      DomainName: !Ref Domainname
      DomainValidationOptions:
      - DomainName: !Ref Domainname
        ValidationDomain: !Ref Domainname
  loadbalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Condition: CreateELBandCert
    Properties:
      Subnets:
      - Ref: subnet1
      SecurityGroups:
        Ref: mastersecgroup      
      Instances:
      - Ref: openshiftmaster
      HealthCheck:
        Target: HTTPS:8443/api
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '10'
        Timeout: '3'      
      Listeners:
      - LoadBalancerPort: '8443'
        InstancePort: '8443'
        Protocol: HTTPS
        InstanceProtocol: HTTPS
        SSLCertificateId:
          Ref: sslcertificate
      - LoadBalancerPort: '443'
        InstancePort: '443'
        Protocol: HTTPS
        InstanceProtocol: HTTPS
        SSLCertificateId:
          Ref: sslcertificate                    
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
